apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-exporter
  labels:
    app: elasticsearch-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch-exporter
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: elasticsearch-exporter
    spec:
      imagePullSecrets:
        - name: ""
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: elasticsearch-exporter
          image: justwatch/elasticsearch_exporter:1.1.0
          imagePullPolicy: IfNotPresent
          command: ["elasticsearch_exporter",
                    {{- with .Values.es_ex_log.format }}
                    "--log.format={{ . }}",
                    {{- end }}
                    {{- with .Values.es_ex_log.level }}
                    "--log.level={{ . }}",
                    {{- end }}
                    {{- if .Values.es.uri }}
                    "--es.uri={{ .Values.es.uri }}",
                    {{- end }}
                    {{- if .Values.es.all }}
                    "--es.all",
                    {{- end }}
                    {{- if .Values.es.indices }}
                    "--es.indices",
                    {{- end }}
                    {{- if .Values.es.indices_settings }}
                    "--es.indices_settings",
                    {{- end }}
                    {{- if .Values.es.shards }}
                    "--es.shards",
                    {{- end }}
                    {{- if .Values.es.snapshots }}
                    "--es.snapshots",
                    {{- end }}
                    {{- if .Values.es.cluster_settings }}
                    "--es.cluster_settings",
                    {{- end }}
                    "--es.timeout={{ .Values.es.timeout }}",
                    {{- if .Values.es.sslSkipVerify }}
                    "--es.ssl-skip-verify",
                    {{- end }}
                    {{- if .Values.es.ssl.enabled }}
                    "--es.ca={{.Values.es.ssl.ca.path }}",
                    {{- if .Values.es.ssl.client.enabled }}
                    "--es.client-cert={{ .Values.es.ssl.client.pemPath }}",
                    "--es.client-private-key={{ .Values.es.ssl.client.keyPath }}",
                    {{- end }}
                    {{- end }}
                    "--web.listen-address=:{{ .Values.es_ex_service.httpPort }}",
                    "--web.telemetry-path={{ .Values.es_ex_web.path }}"]
          securityContext:
            capabilities:
              drop:
                - SETPCAP
                - MKNOD
                - AUDIT_WRITE
                - CHOWN
                - NET_RAW
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - SETGID
                - SETUID
                - NET_BIND_SERVICE
                - SYS_CHROOT
                - SETFCAP
            readOnlyRootFilesystem: true
          ports:
            - containerPort: {{ .Values.es_ex_service.httpPort }}
              name: http
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 20"]
